---
import type { CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'
import Place from '../../layouts/Place.astro'
import type Document from '../../data/document'
import Documents from '../../components/Documents.astro'

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const places = await getCollection('place')
  return places.map((place) => ({
    params: { id: place.id },
    props: { place }
  }))
}

// 2. When it's time to render, you can get the entry directly from the prop
export interface Props {
  place: CollectionEntry<'place'>
}
const { place } = Astro.props
const documents = import.meta.glob<Document>('../../data/*.json', {
  import: 'default',
  eager: true
})
const trips = Object.keys(documents)
  .map((doc) => documents[doc])
  .flat(3)
  .filter((doc) => doc.place === place.data.title && doc.collection === 'trip')
  .sort((a, b) => +new Date(b.date) - +new Date(a.date))
const { Content } = await render(place)
---

<Place place={place}>
  <div class='relative z-10 mx-auto mb-6 max-w-4xl bg-white px-12 pb-6 lg:px-24'>
    <div class='prose-sm lg:prose-lg pt-6 prose sm:prose'>
      <Content />
    </div>
  </div>
  <Documents documents={trips} />
</Place>
